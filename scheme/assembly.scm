(library (assembly)
  (export assemble)
  (import (rnrs) (opcode))

  (define (assemble-code code)
	(let ((mem (make-bytevector (* 2 (length code)))))
	  (display "Assembling " ) (display code) (newline)
	  (cons mem 
			(let loop ((cur code)
					   (stack-use 0)
					   (stack-size 0)
					   (shift 0))
			  (if (null? cur)
				stack-size
				(let* ((cmd (car cur))
					   (nuse (+ stack-use (caddr cmd))))
				  (bytevector-u8-set! mem shift (opcode (car cmd)))
				  (bytevector-s8-set! mem (+ 1 shift) (cadr cmd))
				  (loop (cdr cur)
						nuse
						(max nuse stack-size)
						(+ shift 2))))))))


  (define (assemble root port)
	(define (write-strings strings)
	  (let ((oldpos (port-position port)))
		(for-each (lambda (x)
					(put-bytevector port (string->utf8 x))
					(put-u8 port 0))
				  strings)
		(- (port-position port) oldpos)))

	(let ((undefs		(cadr (assq 'undefs root)))
		  (symbols	(cadr (assq 'symbols root)))
		  (code		(cadr (assq 'code root))))
	  (for-each assemble-code code)
	  (set-port-position! port 8)
	  (let ((header (make-bytevector 8)))
		(bytevector-u32-native-set! header 0 (write-strings undefs))
		(bytevector-u32-native-set! header 4 (write-strings symbols))
		(set-port-position! port 0)
		(put-bytevector port header))
	  ))
  )

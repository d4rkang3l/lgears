(include "base.scm")

(define (test-unary-pred pred arg expect)
  (test pred eq? (pred arg) expect))

(test-unary-pred boolean? #t #t)
(test-unary-pred boolean? #f #t)
(test-unary-pred boolean? 'foo #f)
(test-unary-pred procedure? 'foo #f)
(test-unary-pred procedure? test-unary-pred #t)
(test-unary-pred procedure? display #t)
(test-unary-pred pair? '(1 2) #t)
(test-unary-pred pair? '(1 . 2) #t)
(test-unary-pred pair? 'foo #f)
(test-unary-pred symbol? 'foo #t)
(test-unary-pred symbol? "foo" #f)
(test-unary-pred string? "foo" #t)
(test-unary-pred string? 'foo #f)
(test-unary-pred vector? '(1 2 3) #f)
(test-unary-pred vector? (vector 1 2 3) #t)
(test-unary-pred char? #\f #t)
(test-unary-pred char? 1 #f)
(test-unary-pred null? '(1) #f)
(test-unary-pred null? '() #t)
(test-unary-pred number? 42 #t)
(test-unary-pred number? #\n #f)
(test-unary-pred not #t #f)
(test-unary-pred not #f #t)
(test-unary-pred zero? 0 #t)
(test-unary-pred zero? 1 #f)
(test-unary-pred positive? 1 #t)
(test-unary-pred positive? -1 #f)
(test-unary-pred negative? -1 #t)
(test-unary-pred negative? 1 #f)
(test-unary-pred odd? 3 #t)
(test-unary-pred odd? 4 #f)
(test-unary-pred even? 4 #t)
(test-unary-pred even? 5 #f)

(define (test-binary-pred pred arg0 arg1 expect)
  (test pred eq? (pred arg0 arg1) expect))

;(test-binary-pred equal? '(1 2 3) '(1 2 3) #t)
;(test-binary-pred equal? '(1 2 3) '(1 2 73) #f)
;(test-binary-pred equal? '(1 2 . 3) '(1 2 . 3) #t)
;(test-binary-pred equal? '(1 2 . 3) '(1 2 . 8) #f)
;(test-binary-pred equal? "foo" "foo" #t)
;(test-binary-pred equal? "foo" "bar" #f)
;(test-binary-pred equal? (vector 1 2 3) (vector 1 2 3) #t)
;(test-binary-pred equal? (vector 1 2 5) (vector 1 2 3) #f)
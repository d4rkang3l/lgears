#!r6rs
#|
 | Copyright (C) 2009 - Stepan Zastupov
 | This program is free software; you can redistribute it and/or
 | modify it under the terms of the GNU General Public License
 | as published by the Free Software Foundation; either version 2
 | of the License, or (at your option) any later version.
 |
 | This program is distributed in the hope that it will be useful,
 | but WITHOUT ANY WARRANTY; without even the implied warranty of
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 | GNU General Public License for more details.
 |
 | You should have received a copy of the GNU General Public License
 | along with this program; if not, write to the Free Software
 | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 |#

(import (rnrs)
        (format)
        (sc opcode))

;;;
;;; It's ugly, I know :\
;;;

(define (with-header path func)
  (let ((port (open-file-output-port path
                                     (file-options no-fail)
                                     (buffer-mode block)
                                     (native-transcoder))))
    (format #t "Generating header ~a ...\n" path)
    (func port)
    (close-port port)))

(with-header
  "opcodes.h"
  (lambda (port)
    (display "#ifndef OPCODES_H\n#define OPCODES_H\n\n" port)
    (display "/* Generated by gen-header.scm, do not edit. */\n\n" port)
    (oplist-for-each (lambda (idx op)
                       (format port "#define ~a\t~a\t/* ~a */\n" (car op) idx (cdr op))))
    (display "\n#define OP_CASE(code) case code: return #code" port)
    (display "\n\nconst char* opcode_name(int code)\n{\n" port)
    (display "\tswitch (code) {\n" port)
    (for-each (lambda (op)
                (format port "\t\tOP_CASE(~a);\n" (car op)))
              oplist)
    (display "\t}\n" port)
    (display "\treturn \"unknown\";\n}\n" port)

    (display "\n#endif" port)))

(with-header
  "opcode_targets.h"
  (lambda (port)

    (display "#ifndef OPCODE_TARGETS_H\n#define OPCODE_TARGETS_H\n\n" port)
    (display "static const void* opcode_targets[] = {\n" port)
    (oplist-for-each (lambda (idx op)
                       (format port "\t&&TARGET_~a,\n" (car op)) port))
    (display "};\n\n#endif" port)))
